__kernel __attribute__((reqd_work_group_size (1,1,1))) void latencyCnt (
	__global uint* input,
	__global uint* result,
	uint iterations
	)	
{
	uint res = 0;
	// transfer the data to local memory first
	int i;
	__local uint shared[SIZE];
	for(i = 0; i < SIZE;) {
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
		shared[i] = input[i];
		++i;
	}

	// traverse the array
	uint next = 0;
	for(int i = 0; i < iterations; ++i) {
		do {
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			next = shared[next];
			res += next;
		} while (next);
	}
	*result = res;
}
